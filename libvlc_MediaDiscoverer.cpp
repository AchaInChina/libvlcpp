/*****************************************************************************
 * libvlc_MediaDiscoverer.cpp: MediaDiscoverer implementation
 *****************************************************************************
 * Copyright Â© 2014 the VideoLAN team
 *
 * Authors: Alexey Sokolov <alexey@alexeysokolov.co.cc>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

/* This file is autogenerated */


#include <vlc.hpp>

namespace VLC {


MediaDiscoverer::MediaDiscoverer(libvlc_media_discoverer_t* obj) 
{
    if (!obj) 
    {
        throw Exception("Can't construct MediaDiscoverer");
    }
    m_obj = obj;
    m_own = true;
}

MediaDiscoverer::MediaDiscoverer(MediaDiscoverer&& another) 
{
    m_obj = another.m_obj;
    m_own = another.m_own;
    another.m_obj = NULL;
    another.m_own = false;
}

const MediaDiscoverer& MediaDiscoverer::operator=(MediaDiscoverer&& another) 
{
    if (this == &another) 
    {
        return *this;
    }
    if (m_own) 
    {
        libvlc_media_discoverer_release(m_obj);
    }
    m_obj = another.m_obj;
    m_own = another.m_own;
    another.m_obj = NULL;
    another.m_own = false;
    return *this;
}

libvlc_media_discoverer_t* MediaDiscoverer::get_c_object() 
{
    return m_obj;
}

const libvlc_media_discoverer_t* MediaDiscoverer::get_c_object() const 
{
    return m_obj;
}

MediaDiscoverer::~MediaDiscoverer() 
{
    if (m_own) 
    {
        libvlc_media_discoverer_release(m_obj);
    }
}


MediaDiscoverer::MediaDiscoverer(Instance & p_inst, const std::string& psz_name) 
{
    m_obj = libvlc_media_discoverer_new_from_name(p_inst.get_c_object(), psz_name.c_str());
    if (!m_obj) 
    {
        throw Exception("Can't construct MediaDiscoverer");
    }
    m_own = true;
}

std::string MediaDiscoverer::localizedName() 
{
    char * c_result = libvlc_media_discoverer_localized_name(m_obj);
    std::string result = c_result;
    libvlc_free(c_result);
    return result;
}

libvlc_event_manager_t * MediaDiscoverer::eventManager() 
{
    libvlc_event_manager_t * c_result = libvlc_media_discoverer_event_manager(m_obj);
    libvlc_event_manager_t * result = c_result;
    return result;
}

bool MediaDiscoverer::isRunning() 
{
    int c_result = libvlc_media_discoverer_is_running(m_obj);
    bool result = c_result;
    return result;
}

void MediaDiscoverer::release() 
{
    libvlc_media_discoverer_release(m_obj);
}

} // namespace VLC

