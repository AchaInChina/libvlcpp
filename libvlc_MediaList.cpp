/*****************************************************************************
 * libvlc_MediaList.cpp: MediaList implementation
 *****************************************************************************
 * Copyright Â© 2014 the VideoLAN team
 *
 * Authors: Alexey Sokolov <alexey@alexeysokolov.co.cc>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

/* This file is autogenerated */


#include <vlc.hpp>

namespace VLC {


MediaList::MediaList(libvlc_media_list_t* obj) 
{
    if (!obj) 
    {
        throw Exception("Can't construct MediaList");
    }
    m_obj = obj;
}

MediaList::MediaList(const MediaList& another) 
{
    m_obj = another.m_obj;
    retain();
}

const MediaList& MediaList::operator=(const MediaList& another) 
{
    if (this == &another) 
    {
        return *this;
    }
    release();
    m_obj = another.m_obj;
    retain();
    return *this;
}

bool MediaList::operator==(const MediaList& another) const 
{
    return m_obj == another.m_obj;
}

MediaList::~MediaList() 
{
    release();
}


MediaList::MediaList(Media & p_md) 
{
    m_obj = libvlc_media_subitems(p_md.get_c_object());
    if (!m_obj) 
    {
        throw Exception("Can't construct MediaList");
    }
}

MediaList::MediaList(MediaDiscoverer & p_mdis) 
{
    m_obj = libvlc_media_discoverer_media_list(p_mdis.get_c_object());
    if (!m_obj) 
    {
        throw Exception("Can't construct MediaList");
    }
}

MediaList::MediaList(MediaLibrary & p_mlib) 
{
    m_obj = libvlc_media_library_media_list(p_mlib.get_c_object());
    if (!m_obj) 
    {
        throw Exception("Can't construct MediaList");
    }
}

MediaList::MediaList(Instance & p_instance) 
{
    m_obj = libvlc_media_list_new(p_instance.get_c_object());
    if (!m_obj) 
    {
        throw Exception("Can't construct MediaList");
    }
}

void MediaList::setMedia(Media & p_md) 
{
    libvlc_media_list_set_media(m_obj, p_md.get_c_object());
}

int MediaList::addMedia(Media & p_md) 
{
    int c_result = libvlc_media_list_add_media(m_obj, p_md.get_c_object());
    int result = c_result;
    return result;
}

int MediaList::insertMedia(Media & p_md, int i_pos) 
{
    int c_result = libvlc_media_list_insert_media(m_obj, p_md.get_c_object(), i_pos);
    int result = c_result;
    return result;
}

int MediaList::removeIndex(int i_pos) 
{
    int c_result = libvlc_media_list_remove_index(m_obj, i_pos);
    int result = c_result;
    return result;
}

int MediaList::count() 
{
    int c_result = libvlc_media_list_count(m_obj);
    int result = c_result;
    return result;
}

Media MediaList::itemAtIndex(int i_pos) 
{
    libvlc_media_t * c_result = libvlc_media_list_item_at_index(m_obj, i_pos);
    Media result = c_result;
    return result;
}

int MediaList::indexOfItem(Media & p_md) 
{
    int c_result = libvlc_media_list_index_of_item(m_obj, p_md.get_c_object());
    int result = c_result;
    return result;
}

bool MediaList::isReadonly() 
{
    int c_result = libvlc_media_list_is_readonly(m_obj);
    bool result = c_result;
    return result;
}

void MediaList::lock() 
{
    libvlc_media_list_lock(m_obj);
}

void MediaList::unlock() 
{
    libvlc_media_list_unlock(m_obj);
}

libvlc_event_manager_t * MediaList::eventManager() 
{
    libvlc_event_manager_t * c_result = libvlc_media_list_event_manager(m_obj);
    libvlc_event_manager_t * result = c_result;
    return result;
}

void MediaList::release() 
{
    libvlc_media_list_release(m_obj);
}

void MediaList::retain() 
{
    libvlc_media_list_retain(m_obj);
}

} // namespace VLC

