/*****************************************************************************
 * libvlc_Video.cpp: Video implementation
 *****************************************************************************
 * Copyright Â© 2014 the VideoLAN team
 *
 * Authors: Alexey Sokolov <alexey@alexeysokolov.co.cc>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

/* This file is autogenerated */


#include <vlc.hpp>

namespace VLC {


Video::Video(libvlc_media_player_t* obj) 
{
    if (!obj) 
    {
        throw Exception("Can't construct Video");
    }
    m_obj = obj;
}

Video::Video(const Video& another) 
{
    m_obj = another.m_obj;
    retain();
}

const Video& Video::operator=(const Video& another) 
{
    if (this == &another) 
    {
        return *this;
    }
    release();
    m_obj = another.m_obj;
    retain();
    return *this;
}

bool Video::operator==(const Video& another) const 
{
    return m_obj == another.m_obj;
}

Video::~Video() 
{
    release();
}


void Video::setCallbacks(libvlc_video_lock_cb lock, libvlc_video_unlock_cb unlock, libvlc_video_display_cb display, void * opaque) 
{
    libvlc_video_set_callbacks(m_obj, lock, unlock, display, opaque);
}

void Video::setFormat(const std::string& chroma, unsigned width, unsigned height, unsigned pitch) 
{
    libvlc_video_set_format(m_obj, chroma.c_str(), width, height, pitch);
}

void Video::setFormatCallbacks(libvlc_video_format_cb setup, libvlc_video_cleanup_cb cleanup) 
{
    libvlc_video_set_format_callbacks(m_obj, setup, cleanup);
}

void Video::setKeyInput(unsigned on) 
{
    libvlc_video_set_key_input(m_obj, on);
}

void Video::setMouseInput(unsigned on) 
{
    libvlc_video_set_mouse_input(m_obj, on);
}

int Video::size(unsigned num, unsigned * px, unsigned * py) 
{
    int c_result = libvlc_video_get_size(m_obj, num, px, py);
    int result = c_result;
    return result;
}

int Video::cursor(unsigned num, int * px, int * py) 
{
    int c_result = libvlc_video_get_cursor(m_obj, num, px, py);
    int result = c_result;
    return result;
}

float Video::scale() 
{
    float c_result = libvlc_video_get_scale(m_obj);
    float result = c_result;
    return result;
}

void Video::setScale(float f_factor) 
{
    libvlc_video_set_scale(m_obj, f_factor);
}

std::string Video::aspectRatio() 
{
    char * c_result = libvlc_video_get_aspect_ratio(m_obj);
    std::string result = c_result;
    libvlc_free(c_result);
    return result;
}

void Video::setAspectRatio(const std::string& psz_aspect) 
{
    libvlc_video_set_aspect_ratio(m_obj, psz_aspect.c_str());
}

int Video::spu() 
{
    int c_result = libvlc_video_get_spu(m_obj);
    int result = c_result;
    return result;
}

int Video::spuCount() 
{
    int c_result = libvlc_video_get_spu_count(m_obj);
    int result = c_result;
    return result;
}

std::list<TrackDescription> Video::spuDescription() 
{
    libvlc_track_description_t * c_result = libvlc_video_get_spu_description(m_obj);
    std::list<TrackDescription> result = TrackDescription::makeList(c_result);
    libvlc_track_description_list_release(c_result);
    return result;
}

int Video::setSpu(int i_spu) 
{
    int c_result = libvlc_video_set_spu(m_obj, i_spu);
    int result = c_result;
    return result;
}

int Video::setSubtitleFile(const std::string& psz_subtitle) 
{
    int c_result = libvlc_video_set_subtitle_file(m_obj, psz_subtitle.c_str());
    int result = c_result;
    return result;
}

int64_t Video::spuDelay() 
{
    int64_t c_result = libvlc_video_get_spu_delay(m_obj);
    int64_t result = c_result;
    return result;
}

int Video::setSpuDelay(int64_t i_delay) 
{
    int c_result = libvlc_video_set_spu_delay(m_obj, i_delay);
    int result = c_result;
    return result;
}

std::list<TrackDescription> Video::titleDescription() 
{
    libvlc_track_description_t * c_result = libvlc_video_get_title_description(m_obj);
    std::list<TrackDescription> result = TrackDescription::makeList(c_result);
    libvlc_track_description_list_release(c_result);
    return result;
}

std::list<TrackDescription> Video::chapterDescription(int i_title) 
{
    libvlc_track_description_t * c_result = libvlc_video_get_chapter_description(m_obj, i_title);
    std::list<TrackDescription> result = TrackDescription::makeList(c_result);
    libvlc_track_description_list_release(c_result);
    return result;
}

std::string Video::cropGeometry() 
{
    char * c_result = libvlc_video_get_crop_geometry(m_obj);
    std::string result = c_result;
    libvlc_free(c_result);
    return result;
}

void Video::setCropGeometry(const std::string& psz_geometry) 
{
    libvlc_video_set_crop_geometry(m_obj, psz_geometry.c_str());
}

int Video::teletext() 
{
    int c_result = libvlc_video_get_teletext(m_obj);
    int result = c_result;
    return result;
}

void Video::setTeletext(int i_page) 
{
    libvlc_video_set_teletext(m_obj, i_page);
}

int Video::trackCount() 
{
    int c_result = libvlc_video_get_track_count(m_obj);
    int result = c_result;
    return result;
}

std::list<TrackDescription> Video::trackDescription() 
{
    libvlc_track_description_t * c_result = libvlc_video_get_track_description(m_obj);
    std::list<TrackDescription> result = TrackDescription::makeList(c_result);
    libvlc_track_description_list_release(c_result);
    return result;
}

int Video::track() 
{
    int c_result = libvlc_video_get_track(m_obj);
    int result = c_result;
    return result;
}

int Video::setTrack(int i_track) 
{
    int c_result = libvlc_video_set_track(m_obj, i_track);
    int result = c_result;
    return result;
}

int Video::takeSnapshot(unsigned num, const std::string& psz_filepath, unsigned int i_width, unsigned int i_height) 
{
    int c_result = libvlc_video_take_snapshot(m_obj, num, psz_filepath.c_str(), i_width, i_height);
    int result = c_result;
    return result;
}

void Video::setDeinterlace(const std::string& psz_mode) 
{
    libvlc_video_set_deinterlace(m_obj, psz_mode.c_str());
}

int Video::marqueeInt(unsigned option) 
{
    int c_result = libvlc_video_get_marquee_int(m_obj, option);
    int result = c_result;
    return result;
}

std::string Video::marqueeString(unsigned option) 
{
    char * c_result = libvlc_video_get_marquee_string(m_obj, option);
    std::string result = c_result;
    libvlc_free(c_result);
    return result;
}

void Video::setMarqueeInt(unsigned option, int i_val) 
{
    libvlc_video_set_marquee_int(m_obj, option, i_val);
}

void Video::setMarqueeString(unsigned option, const std::string& psz_text) 
{
    libvlc_video_set_marquee_string(m_obj, option, psz_text.c_str());
}

int Video::logoInt(unsigned option) 
{
    int c_result = libvlc_video_get_logo_int(m_obj, option);
    int result = c_result;
    return result;
}

void Video::setLogoInt(unsigned option, int value) 
{
    libvlc_video_set_logo_int(m_obj, option, value);
}

void Video::setLogoString(unsigned option, const std::string& psz_value) 
{
    libvlc_video_set_logo_string(m_obj, option, psz_value.c_str());
}

int Video::adjustInt(unsigned option) 
{
    int c_result = libvlc_video_get_adjust_int(m_obj, option);
    int result = c_result;
    return result;
}

void Video::setAdjustInt(unsigned option, int value) 
{
    libvlc_video_set_adjust_int(m_obj, option, value);
}

float Video::adjustFloat(unsigned option) 
{
    float c_result = libvlc_video_get_adjust_float(m_obj, option);
    float result = c_result;
    return result;
}

void Video::setAdjustFloat(unsigned option, float value) 
{
    libvlc_video_set_adjust_float(m_obj, option, value);
}

void Video::retain() {
    libvlc_media_player_retain(m_obj);
}


void Video::release() {
    libvlc_media_player_release(m_obj);
}


} // namespace VLC

