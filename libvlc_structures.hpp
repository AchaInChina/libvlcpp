/*****************************************************************************
 * libvlc_structures.hpp: LibVLC++ structures
 *****************************************************************************
 * Copyright Â© 2014 the VideoLAN team
 *
 * Authors: Alexey Sokolov <alexey@alexeysokolov.co.cc>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

/* This file is autogenerated */



#ifndef LIBVLC_CXX_STRUCTURES_H
#define LIBVLC_CXX_STRUCTURES_H
#include <list>
#include <vector>

namespace VLC {


class ModuleDescription 
{
public:
    const std::string& name() const;
    const std::string& shortname() const;
    const std::string& longname() const;
    const std::string& help() const;

    static std::list<ModuleDescription> makeList(libvlc_module_description_t* head);
private:
    ModuleDescription(libvlc_module_description_t* c);
    std::string m_name;
    std::string m_shortname;
    std::string m_longname;
    std::string m_help;
};


class MediaTrackInfo 
{
public:
    uint32_t codec() const;
    int id() const;
    libvlc_track_type_t type() const;
    int profile() const;
    int level() const;
    unsigned channels() const;
    unsigned rate() const;
    unsigned height() const;
    unsigned width() const;

    MediaTrackInfo(libvlc_media_track_info_t* c);
private:
    uint32_t m_codec;
    int m_id;
    libvlc_track_type_t m_type;
    int m_profile;
    int m_level;
    unsigned m_channels;
    unsigned m_rate;
    unsigned m_height;
    unsigned m_width;
};


class AudioOutputDescription 
{
public:
    const std::string& name() const;
    const std::string& description() const;

    static std::list<AudioOutputDescription> makeList(libvlc_audio_output_t* head);
private:
    AudioOutputDescription(libvlc_audio_output_t* c);
    std::string m_name;
    std::string m_description;
};


class TrackDescription 
{
public:
    int id() const;
    const std::string& name() const;

    static std::list<TrackDescription> makeList(libvlc_track_description_t* head);
private:
    TrackDescription(libvlc_track_description_t* c);
    int m_id;
    std::string m_name;
};

} // namespace VLC
#endif
